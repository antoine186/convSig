// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// RM_nonSNP
LogicalVector RM_nonSNP(DataFrame startend, SEXP ar);
RcppExport SEXP _convSig_RM_nonSNP(SEXP startendSEXP, SEXP arSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type startend(startendSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ar(arSEXP);
    rcpp_result_gen = Rcpp::wrap(RM_nonSNP(startend, ar));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
RcppExport SEXP timesTwo(SEXP x);
RcppExport SEXP _convSig_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// timesTwoList
RcppExport SEXP timesTwoList(SEXP x);
RcppExport SEXP _convSig_timesTwoList(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwoList(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_convSig_RM_nonSNP", (DL_FUNC) &_convSig_RM_nonSNP, 2},
    {"_convSig_timesTwo", (DL_FUNC) &_convSig_timesTwo, 1},
    {"_convSig_timesTwoList", (DL_FUNC) &_convSig_timesTwoList, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_convSig(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
